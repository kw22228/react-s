@use './foundation/base'; //modules

$font-stack: Helvetica, sans-serif;
$primary-color: rgb(240, 11, 11);

.font {
    font: 100% $font-stack;
    color: $primary-color;
}

.Text {
    font: 100px $font-stack;
}

//nesting하게 선언
nav {
    ul {
        margin: 0;
        padding: 0;
        list-style: none;
    }

    li {
        display: inline-block;
    }

    a {
        display: block;
        padding: 6px 12px;
        text-decoration: none;
    }
}

//modules의 변수를 가져다 쓸 수 있다.
.inverse {
    background-color: base.$primary-color;
    color: white;
}

//Mixin (약간 함수처럼 생김..)
@mixin theme($theme: DarkGray) {
    background: $theme;
    box-shadow: 0 0 1px rgba($theme, 0.25);
    color: #fff;
}

.info {
    @include theme;
}
.alert {
    @include theme($theme: DarkRed);
}
.success {
    @include theme($theme: DarkGreen);
}

//extend & inheritance
%message-shared {
    border: 1px solid #ccc;
    padding: 10px;
    color: #333;
    font-weight: bold;
}

%equal-heights {
    display: flex;
    flex-wrap: wrap;
}

.message {
    @extend %message-shared;
}

.success2 {
    @extend %message-shared;
    border-color: green;
}

.error {
    @extend %message-shared;
    border-color: red;
    color: blue;
}

.warning {
    @extend %message-shared;
    border-color: yellow;
}

//if or for
@mixin avatar($size, $circle: false) {
    width: $size;
    height: $size;
    background-color: aqua;

    @if $circle {
        border-radius: $size / 2;
    }
}

.square-av {
    @include avatar(100px, $circle: false);
}
.circle-av {
    @include avatar(100px, $circle: true);
}

//function
@function pow($base, $exponent) {
    $result: 1;
    @for $_ from 1 through $exponent {
        $result: $result * $base;
    }
    @return $result;
}

.sidebar {
    float: left;
    margin-left: pow(4, 3) * 1px;
}

//error
@mixin reflexive-position($property, $value) {
    @if $property != left and $property != right {
        @error "Property #{$property} must be either left or right.";
    }

    $left-value: if($property == right, initial, $value);
    $right-value: if($property == right, $value, initial);

    left: $left-value;
    right: $right-value;
    [dir='rtl'] & {
        left: $right-value;
        right: $left-value;
    }
}

.sidebar {
    @include reflexive-position(right, 12px);
    //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // Error: Property top must be either left or right.
}

// Interpolation
@mixin prefix($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
}

.gray {
    @include prefix(filter, grayscale(50%), moz webkit o ms);
}

@mixin prefix2($property, $value, $prefixes) {
    @each $prefix in $prefixes {
        #{$property}: -#{$prefix}-#{$value};
    }
    #{$property}: $value;
}

.button {
    @include prefix2(background, linear-gradient(red, yellow), moz webkit o ms);
}

//interpolation 2
@mixin inline-animation($duration) {
    $name: inline-#{unique-id()};

    @keyframes #{$name} {
        @content;
    }

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: infinite;
}

.pulse {
    @include inline-animation(2s) {
        from {
            background-color: yellow;
        }
        to {
            background-color: red;
        }
    }
}
